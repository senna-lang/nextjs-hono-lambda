# Cline Rules for nextjs-hono-lambda プロジェクト

## プロジェクト固有のパターン

### コーディング規約
- TypeScriptの厳格モードを使用する
- コンポーネントは関数コンポーネントとして実装する
- Hooksの命名は「use」で始める
- APIエンドポイントは RESTful 設計に従う
- エラーハンドリングは常に実装する

### ファイル構造
- フロントエンドとバックエンドは別ディレクトリで管理
- コンポーネントは `src/components` ディレクトリに配置
- フックは `src/hooks` ディレクトリに配置
- 型定義は `src/types` ディレクトリに配置
- ユーティリティ関数は `src/lib` ディレクトリに配置

### 命名規則
- コンポーネント: PascalCase (例: TodoItem)
- フック: camelCase (例: useTodos)
- 関数: camelCase (例: fetchTodos)
- 定数: UPPER_SNAKE_CASE (例: API_URL)
- 型/インターフェース: PascalCase (例: Todo)
- ファイル名: コンポーネントはPascalCase、その他はcamelCase

### 状態管理
- ローカル状態には useState を使用
- 複雑な状態管理には useReducer を検討
- コンポーネント間の状態共有にはカスタムフックを使用
- グローバル状態管理は現在使用していない（将来的にはContextやReduxを検討）

### API通信
- APIクライアントは Hono Client を使用
- すべてのAPI呼び出しは try-catch でエラーハンドリング
- ローディング状態を適切に管理
- レスポンスの型チェックを実装

## 開発ワークフロー

### ローカル開発
1. フロントエンドとバックエンドを別々のターミナルで起動
2. フロントエンド: `cd frontend && npm run dev`
3. バックエンド: `cd hono-lambda && npm run build && npm run start`

### デプロイ
1. バックエンドのデプロイ: `cd hono-lambda && npx cdk deploy`
2. フロントエンドのデプロイ: Vercelなどのプラットフォームを使用

### 環境変数
- フロントエンド環境変数は `.env.local` に設定
- バックエンド環境変数は CDK スタックで設定

## 既知の課題と対処法

### Lambda Cold Start
- 関数のウォームアップ戦略を検討
- 関数のメモリ割り当てを増やすことでパフォーマンス向上

### CORS問題
- API Gateway と Lambda Function URL の両方で CORS 設定が必要
- 開発中は `*` を許可しているが、本番環境では適切に制限する

### データ永続化
- 現在はメモリ内データストアを使用
- DynamoDB 統合時には楽観的ロックを実装する予定

### エラーハンドリング
- フロントエンドでは ErrorMessage コンポーネントを使用
- バックエンドでは適切なステータスコードとエラーメッセージを返す
- ネットワークエラーは再試行メカニズムを検討

## ユーザー体験の考慮事項

### ローディング状態
- 初期ロード時は LoadingIndicator コンポーネントを表示
- 操作中のローディングはボタンの状態変更で表示

### エラー表示
- エラーは ErrorMessage コンポーネントでトースト形式で表示
- ユーザーがエラーを閉じることができる
- クリティカルなエラーは画面中央に表示

### 空の状態
- TODOリストが空の場合は EmptyState コンポーネントを表示
- ユーザーに次のアクションを促す

### フォーム操作
- フォーム送信はEnterキーでも可能
- 入力検証はリアルタイムで行う
- 送信中はボタンを無効化

## 将来の拡張に関する注意点

### データベース統合
- DynamoDB のシングルテーブル設計を検討
- GSI を使用した効率的なクエリを実装

### 認証統合
- Amazon Cognito を使用する予定
- JWT トークンをAPIリクエストに含める
- 認証状態に基づいたUI条件分岐

### テスト戦略
- Jest を使用したユニットテスト
- React Testing Library を使用したコンポーネントテスト
- Cypress を使用したE2Eテスト
- AWS CDK テストを使用したインフラテスト